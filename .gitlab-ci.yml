---
stages:
  - prepare
  - python
  - compile
  - fortran
  - statistics
  - finalize


###################################################################################################
variables:
  # ===============================================================================================
  # GitLab Settings
  # ===============================================================================================
  GIT_SUBMODULE_STRATEGY: normal

  # ===============================================================================================
  # Shortcut names
  # ===============================================================================================
  TESTROOT:   "$LOCAL_HOME/GitLabCI_Pipeline_$CI_PIPELINE_ID"
  MARC_VERSION: "2024.1"


###################################################################################################
# https://docs.gitlab.com/ci/yaml/workflow
workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_COMMIT_BRANCH

create_testroot_matesting:
  stage: prepare
  tags:
    - matesting_bare-metal
  script:
    - mkdir -p ${TESTROOT}

.on_merge:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'

###################################################################################################

.python_base:
  stage: python
  image: git.damask-multiphysics.org:5050/damask/damask/python:$PYTHON_IMAGE
  tags:
    - matesting2_docker
  before_script:
    - python --version
    - pip list

.python_default:
  extends: .python_base
  variables: {PYTHON_IMAGE: 2025.02.25}

.python_min:
  extends: .python_base
  variables: {PYTHON_IMAGE: '310_2412'}


.create_package:
  script:
    - sed -i 's/-[[:digit:]]*-.*//' VERSION
    - cd python
    - python3 -m build --wheel --no-isolation

create_package:
  extends:
    - .create_package
    - .python_default

create_package_min:
  extends:
    - .create_package
    - .python_min
    - .on_merge


.pytest:
  script:
    - export DAMASK_ROOT=$(pwd)
    - PYTHONPATH=${DAMASK_ROOT}/python:$PYTHONPATH
    - cd python
    - python3 -m pytest -v --cov=damask --cov-report=xml --damask-root=${DAMASK_ROOT}
    - coverage report --fail-under=90 --show-missing

pytest:
  extends:
    - .pytest
    - .python_default

pytest_min:
  extends:
    - .pytest
    - .python_min
    - .on_merge


doctest:
  extends: .python_default
  script:
    - export DAMASK_ROOT=$(pwd)
    - PYTHONPATH=${DAMASK_ROOT}/python:$PYTHONPATH
    - cd python
    - cp tests/resources/doctest/* .
    # pretend neper to be present such that call to /bin/neper does not fail
    - echo '#!/usr/bin/env bash' > /bin/neper
    - chmod +x /bin/neper
    - python3 -m pytest -v --doctest-modules -k 'not result' damask

mypy:
  extends: .python_default
  script:
    - cd python
    - mypy damask

###################################################################################################

.unittest:
  stage: compile
  tags:
    - matesting2_docker
  script:
    - source env/DAMASK.sh
    - ./bin/DAMASK_test
    - find . -name '*.gcda' -not -path "**/test/*" -exec gcov {} \;
  parallel:
    matrix:
      - BUILD_TYPE: [DEBUG, RELEASE, PERFORMANCE]

.unittest_GCC:
  extends: .unittest
  before_script:
    - cmake -B builddir -DDAMASK_SOLVER=test -DCMAKE_INSTALL_PREFIX=${PWD} -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DBUILDCMD_POST=-coverage
    - cmake --build builddir --target install

.unittest_oneAPI:
  extends: .unittest
  before_script:
    - cmake -B builddir -DDAMASK_SOLVER=test -DCMAKE_INSTALL_PREFIX=${PWD} -DCMAKE_BUILD_TYPE=${BUILD_TYPE}
    - cmake --build builddir --target install


unittest_GCC:
  extends: .unittest_GCC
  image: git.damask-multiphysics.org:5050/damask/damask/gcc_petsc-debug:2025.04.01

unittest_oneAPI:
  extends: .unittest_oneAPI
  image: git.damask-multiphysics.org:5050/damask/damask/oneapi_petsc-debug:2025.04.01


unittest_GCC_min:
  extends:
    - .unittest_GCC
    - .on_merge
  image: git.damask-multiphysics.org:5050/damask/damask/gcc_petsc-debug:2025.03.10

unittest_oneAPI_min:
  extends:
    - .unittest_oneAPI
    - .on_merge
  image: git.damask-multiphysics.org:5050/damask/damask/oneapi_petsc-debug:2025.03.27


###################################################################################################

.compile:
  stage: compile
  tags:
    - matesting2_docker
  before_script:
    - tail +$(grep -n 'Configure Actions.*' /petsc/configure.log | cut -f 1 -d:) /petsc/configure.log
    - head -n 10 /petsc/include/petscversion.h | tail -n 6
    - source env/DAMASK.sh
    - cd PRIVATE/testing
  parallel:
    matrix:
      - IMAGE:
          - gcc_petsc-default:2025.04.01
          - gcc_petsc-i64:2025.04.01
          - oneapi_petsc-default:2025.04.01
  image: git.damask-multiphysics.org:5050/damask/damask/${IMAGE}

compile_grid:
  extends: .compile
  script:
    - pytest -v -k 'compile and grid'

compile_mesh:
  extends: .compile
  script:
    - pytest -v -k 'compile and mesh'

Marc_patch:
  stage: compile
  image: git.damask-multiphysics.org:5050/damask/damask/marc_base:${MARC_VERSION}
  tags:
    - matesting2_docker
  script:
    - source env/DAMASK.sh
    - export TMPDIR=/tmp
    - python3 install/MarcMentat/MSC_modifications.py --editor=gted --marc-version="${MARC_VERSION}" --damask-root="${CI_PROJECT_DIR}" --marc-root=/opt/msc
    - test -f "/opt/msc/mentat${MARC_VERSION}/bin/kill6"
    - cd examples/Marc && python3 -c "import damask;damask.solver.Marc(version=${MARC_VERSION}).submit_job('r-value','texture',True,'h')"
    - test -f "${CI_PROJECT_DIR}/src/Marc/DAMASK_Marc.marc" || { echo "Marc simulation failed, DAMASK_Marc.marc not generated"; exit 1; }

Marc_Intel:
  stage: compile
  image: git.damask-multiphysics.org:5050/damask/damask/marc_patched:${MARC_VERSION}
  tags:
    - matesting2_docker
  script:
    - source env/DAMASK.sh
    - cd PRIVATE/testing
    - pytest -k 'compile and Marc'

setup_Marc:
  stage: compile
  image: git.damask-multiphysics.org:5050/damask/damask/marc_patched:${MARC_VERSION}
  tags:
    - matesting2_docker
  before_script:
    - source env/DAMASK.sh
    - cd examples/Marc && python3 -c "import damask;damask.solver.Marc(version=${MARC_VERSION}).submit_job('r-value','texture',True,'h')"
  script:
    - test -f "${CI_PROJECT_DIR}/src/Marc/DAMASK_Marc.marc" || { echo "Marc simulation failed, DAMASK_Marc.marc not generated"; exit 1; }


###################################################################################################

.configexamples_debug:
  stage: compile
  tags:
    - matesting2_docker
  before_script:
    - tail +$(grep -n 'Configure Actions.*' /petsc/configure.log | cut -f 1 -d:) /petsc/configure.log
    - head -n 10 /petsc/include/petscversion.h | tail -n 6
    - source env/DAMASK.sh
    - cmake -B builddir -DDAMASK_SOLVER=grid -DCMAKE_BUILD_TYPE=DEBUG
    - cmake --build builddir --target install
    - cd PRIVATE/testing
  script:
    - pytest -v -k configexamples

configexamples_debug_GCC:
  extends: .configexamples_debug
  image: git.damask-multiphysics.org:5050/damask/damask/gcc_petsc-default:2025.04.01

configexamples_debug_oneAPI:
  extends: .configexamples_debug
  image: git.damask-multiphysics.org:5050/damask/damask/oneapi_petsc-default:2025.04.01

##################################################################################################

open-source_GCC:
  stage: fortran
  tags:
    - matesting2_docker
  image: git.damask-multiphysics.org:5050/damask/damask/gcc_petsc-default:2025.04.01
  before_script:
    - cmake -DDAMASK_SOLVER=grid -B build/grid && cmake --build build/grid --parallel 2 --target install
    - cmake -DDAMASK_SOLVER=mesh -B build/mesh && cmake --build build/mesh --parallel 2 --target install
    - source env/DAMASK.sh
  script:
    - cd PRIVATE/testing
    - pytest -v -k 'not compile and not (signal or restart) and not Marc'

open-source_signal_restart_GCC:
  stage: fortran
  tags:
    - matesting_bare-metal
  before_script:
    - source /etc/zsh/spackenv
    - spack env activate DAMASK_oneapi_2503
    - cd $(mktemp -d)
    - cmake -DDAMASK_SOLVER=grid -DCMAKE_INSTALL_PREFIX=${TESTROOT} ${CI_PROJECT_DIR}
    - make -j2 all install
    - export PATH=${TESTROOT}/bin:${PATH}
    - cd ${CI_PROJECT_DIR}
    - source env/DAMASK.sh
    - echo Job start:" $(date)"
  script:
    - cd PRIVATE/testing
    - pytest -v -k 'signal or restart' -m 'not cifail' --basetemp ${TESTROOT}/open-source -v
  after_script:
    - echo Job end:" $(date)"

Marc:
  stage: fortran
  extends: setup_Marc
  script:
    - cd ${CI_PROJECT_DIR}/PRIVATE/testing
    - pytest -k 'not compile and Marc' -m 'not cifail'

# Needs closer look
# Phenopowerlaw_singleSlip:
#   stage: fortran
#   script: Phenopowerlaw_singleSlip/test.py

###################################################################################################
grid_performance:
  stage: statistics
  tags:
    - matesting_bare-metal
  before_script:
    - source /etc/zsh/spackenv
    - spack env activate DAMASK_oneapi_2503
    - source env/DAMASK.sh
    - echo Job start:" $(date)"
  script:
    - cd $(mktemp -d)
    - cmake -DOPTIMIZATION=AGGRESSIVE -DDAMASK_SOLVER=grid -DCMAKE_INSTALL_PREFIX=./ ${CI_PROJECT_DIR}
    - make -j2 all install
    - export PATH=${PWD}/bin:${PATH}
    - cd $(mktemp -d)
    - git clone -q https://damask_user:${STATISTICS_TOKEN}@git.damask-multiphysics.org/damask/statistics.git .
    - ./measure_performance.py --input_dir ${CI_PROJECT_DIR}/examples/grid --tag ${CI_COMMIT_SHA}
    - >
        if [ ${CI_COMMIT_BRANCH} == development ]; then
          git add performance.txt
          git commit -m ${CI_PIPELINE_ID}_${CI_COMMIT_SHA}
          git push
        fi


###################################################################################################
update_website_master:
  stage: finalize
  trigger:
    project: damask/website
    branch: master
  only:
    - development

update_website_3.0:
  stage: finalize
  trigger:
    project: damask/website
    branch: "3.0"
  only:
    - "3.0"

update_revision:
  stage: finalize
  tags:
    - matesting2_bare-metal
  before_script:
    - echo Job start:" $(date)"
  script:
    - cd $(mktemp -d)
    - git clone -b development -q https://damask_user:${TOKEN}@git.damask-multiphysics.org/damask/DAMASK.git .
    - export VERSION=$(git describe ${CI_COMMIT_SHA})
    - echo ${VERSION:1} > VERSION
    - >
       git diff-index --quiet HEAD ||
       git commit VERSION -m "[skip ci] updated version information after successful test of $VERSION"
    - if [ ${CI_COMMIT_SHA} == $(git rev-parse HEAD^) ]; then git push --atomic --no-verify origin HEAD:development HEAD:master; fi
  only:
    - development
