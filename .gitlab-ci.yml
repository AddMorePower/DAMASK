---
stages:
  - check_source
  - processing
  - core
  - update_repositories
  - documentation

####################################################################################################
variables:
  # GitLab Settings
  GIT_SUBMODULE_STRATEGY: normal
  # Shortcut names
  MARC_VERSION: '2025.1'
  PETSC_GCC_LATEST: '2025.09.30'
  PETSC_ONEAPI_LATEST: '2025.09.30'
  PYTHON_LATEST: '2025.06.05'

####################################################################################################
# https://docs.gitlab.com/ci/yaml/workflow
workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_COMMIT_BRANCH
  auto_cancel:
    on_job_failure: all


####################################################################################################
# reusable building blocks for common tasks
.on_merge:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'

.on_merge_without_squash:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' && $CI_MERGE_REQUEST_SQUASH_ON_MERGE != 'true'

.registry:
  image: git.damask-multiphysics.org:5050/damask/damask/${IMAGE}

####################################################################################################
# images
.petsc_gcc_default:
  extends: .registry
  variables:
    IMAGE: gcc_petsc-default:${PETSC_GCC_LATEST}

.petsc_gcc_debug:
  extends: .registry
  variables:
    IMAGE: gcc_petsc-debug:${PETSC_GCC_LATEST}

.petsc_gcc_debug_previous:
  extends: .registry
  parallel:
    matrix:
      - IMAGE:
          - gcc_petsc-debug:2025.05.27
          - gcc_petsc-debug:2025.03.10

.petsc_oneapi_default:
  extends: .registry
  variables:
    IMAGE: oneapi_petsc-default:${PETSC_ONEAPI_LATEST}

.petsc_oneapi_debug:
  extends: .registry
  variables:
    IMAGE: oneapi_petsc-debug:${PETSC_ONEAPI_LATEST}

.petsc_oneapi_performance:
  extends: .registry
  variables:
    IMAGE: oneapi_petsc-default:2025.09.30

.petsc_oneapi_debug_previous:
  extends: .registry
  parallel:
    matrix:
      - IMAGE:
          - oneapi_petsc-debug:2025.06.12
          - oneapi_petsc-debug:2025.03.27

.petsc:
  extends: .registry
  parallel:
    matrix:
      - IMAGE:
          - gcc_petsc-default:${PETSC_GCC_LATEST}
          - gcc_petsc-i64:${PETSC_GCC_LATEST}
          - oneapi_petsc-default:${PETSC_ONEAPI_LATEST}

.petsc_previous:
  extends: .registry
  parallel:
    matrix:
      - IMAGE:
          - gcc_petsc-default:2025.05.27
          - gcc_petsc-i64:2025.05.27
          - oneapi_petsc-default:2025.06.12
          - gcc_petsc-default:2025.03.10
          - gcc_petsc-i64:2025.03.10
          - oneapi_petsc-default:2025.03.27

.python:
  extends: .registry
  variables:
    IMAGE: python:${PYTHON_LATEST}

.python_previous:
  extends: .registry
  parallel:
    matrix:
      - IMAGE:
          - python:2025.01.05
          - python:310_2412


####################################################################################################
# Check Source: compile (core) or import (processing) of each commit in a merge request w/o squash
####################################################################################################

.check_source:
  extends: .on_merge_without_squash
  stage: check_source
  variables:
    GIT_DEPTH: 0
  allow_failure: true

core:
  extends: [.check_source, .petsc]
  script:
    - |
      COMMITS=$(git log --reverse --format=format:%H origin/${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}..${CI_COMMIT_SHA}~)
      for COMMIT in ${COMMITS};do
        echo ${COMMIT}
        git checkout ${COMMIT}
        cmake -DDAMASK_SOLVER=grid -B build/grid && cmake --build build/grid --parallel 4 --target install
        cmake -DDAMASK_SOLVER=mesh -B build/mesh && cmake --build build/mesh --parallel 4 --target install
      done


processing:
  extends: [.check_source, .petsc_gcc_default]
  script:
    - |
      source env/DAMASK.sh
      COMMITS=$(git log --reverse --format=format:%H origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME..$CI_COMMIT_SHA)
      for COMMIT in ${COMMITS};do
        echo ${COMMIT}
        python -c 'import damask;print(damask.__version__)'
      done

####################################################################################################
# Processing: pre- and post-processing tools written in Python
####################################################################################################

.processing:
  stage: processing
  before_script:
    - python --version
    - pip list

mypy:
  extends: [.processing, .python]
  script:
    - cd python
    - mypy damask

.create_package:
  extends: .processing
  script:
    - sed -i 's/-[[:digit:]]*-.*//' VERSION
    - cd python
    - python3 -m build --wheel --no-isolation

create_package:
  extends: [.create_package, .python]

create_package_previous:
  extends: [.create_package, .python_previous, .on_merge]


.pytest:
  extends: .processing
  script:
    - export DAMASK_ROOT=$(pwd)
    - PYTHONPATH=${DAMASK_ROOT}/python:$PYTHONPATH
    - cd python
    - python3 -m pytest -v --cov=damask --cov-report=xml --damask-root=${DAMASK_ROOT}
    - coverage report --fail-under=90 --show-missing

pytest:
  extends: [.pytest, .python]

pytest_previous:
  extends: [.pytest, .python_previous, .on_merge]


doctest:
  extends: [.processing, .python]
  script:
    - export DAMASK_ROOT=$(pwd)
    - PYTHONPATH=${DAMASK_ROOT}/python:${PYTHONPATH}
    - cd python
    - cp tests/resources/doctest/* .
    # pretend neper to be present such that call to /bin/neper does not fail
    - echo '#!/usr/bin/env bash' > /bin/neper
    - chmod +x /bin/neper
    - python3 -m pytest -v --doctest-modules -k 'not result' damask


####################################################################################################
# Core: DAMASK core written in Fortran, C++, and C
####################################################################################################

open-source:
  stage: core
  extends: .petsc_gcc_default
  tags:
    - long_running
  needs: []
  before_script:
    - cmake -DDAMASK_SOLVER=grid -B build/grid && cmake --build build/grid --parallel 4 --target install
    - cmake -DDAMASK_SOLVER=mesh -B build/mesh && cmake --build build/mesh --parallel 4 --target install
    - source env/DAMASK.sh
  script:
    - cd PRIVATE/testing
    - export OMP_NUM_THREADS=2
    - pytest -v -x -n 3 --dist=loadscope --durations=20 -k 'not compile and not Marc'

.unittest:
  stage: core
  script:
    - source env/DAMASK.sh
    - ./bin/DAMASK_test
    - find . -name '*.gcda' -not -path "**/test/*" -exec gcov {} \;
  parallel:
    matrix:
      - BUILD_TYPE: [DEBUG, RELEASE, PERFORMANCE]

.unittest_gcc:
  extends: .unittest
  before_script:
    - cmake -B builddir -DDAMASK_SOLVER=test -DCMAKE_INSTALL_PREFIX=${PWD} -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DBUILDCMD_POST=-coverage
    - cmake --build builddir --target install

.unittest_oneapi:
  extends: .unittest
  before_script:
    - cmake -B builddir -DDAMASK_SOLVER=test -DCMAKE_INSTALL_PREFIX=${PWD} -DCMAKE_BUILD_TYPE=${BUILD_TYPE}
    - cmake --build builddir --target install


unittest_gcc:
  extends: [.unittest_gcc, .petsc_gcc_debug]

unittest_oneapi:
  extends: [.unittest_oneapi, .petsc_oneapi_debug]


unittest_gcc_previous:
  extends: [.unittest_gcc, .petsc_gcc_debug_previous, .on_merge]

unittest_oneapi_previous:
  extends: [.unittest_oneapi, .petsc_oneapi_debug_previous, .on_merge]


.compile:
  stage: core
  before_script:
    - tail +$(grep -n 'Configure Actions.*' /petsc/configure.log | cut -f 1 -d:) /petsc/configure.log
    - head -n 10 /petsc/include/petscversion.h | tail -n 6
    - source env/DAMASK.sh
    - cd PRIVATE/testing

.compile_grid:
  extends: .compile
  script:
    - pytest -v -k 'compile and grid'

.compile_mesh:
  extends: .compile
  script:
    - pytest -v -k 'compile and mesh'

compile_grid:
  extends: [.compile_grid, .petsc]

compile_mesh:
  extends: [.compile_mesh, .petsc]

compile_grid_previous:
  extends: [.compile_grid, .petsc_previous, .on_merge]

compile_mesh_previous:
  extends: [.compile_mesh, .petsc_previous, .on_merge]

Marc_patch:
  stage: core
  image: git.damask-multiphysics.org:5050/damask/damask/marc_base:${MARC_VERSION}
  script:
    - source env/DAMASK.sh
    - export TMPDIR=/tmp
    - python3 install/MarcMentat/MSC_modifications.py --editor=gted --marc-version=${MARC_VERSION} --damask-root=${CI_PROJECT_DIR} --marc-root=/opt/msc
    - test -f /opt/msc/mentat${MARC_VERSION}/bin/kill6
    - cd examples/Marc && python3 -c "import damask;damask.solver.Marc(version=${MARC_VERSION}).submit_job('r-value','texture',True,'h')"
    - test -f ${CI_PROJECT_DIR}/src/Marc/DAMASK_Marc.marc || { echo 'Marc simulation failed, DAMASK_Marc.marc not generated'; exit 1; }

Marc_compile:
  stage: core
  image: git.damask-multiphysics.org:5050/damask/damask/marc_patched:${MARC_VERSION}
  script:
    - source env/DAMASK.sh
    - cd PRIVATE/testing
    - pytest -k 'compile and Marc'


.configexamples_debug:
  stage: core
  before_script:
    - tail +$(grep -n 'Configure Actions.*' /petsc/configure.log | cut -f 1 -d:) /petsc/configure.log
    - head -n 10 /petsc/include/petscversion.h | tail -n 6
    - source env/DAMASK.sh
    - cmake -B builddir -DDAMASK_SOLVER=grid -DCMAKE_BUILD_TYPE=DEBUG
    - cmake --build builddir --target install
    - cd PRIVATE/testing
  script:
    - python3 -X faulthandler -m pytest -p no:faulthandler -v -k configexamples                     # https://blog.xmatthias.com/post/pytest-debug-segfault/

configexamples_debug_gcc:
  extends: [.configexamples_debug, .petsc_gcc_default]

configexamples_debug_oneapi:
  extends: [.configexamples_debug, .petsc_oneapi_default]

Marc_run:
  stage: core
  image: git.damask-multiphysics.org:5050/damask/damask/marc_patched:${MARC_VERSION}
  before_script:
    - source env/DAMASK.sh
    - cd examples/Marc && python3 -c "import damask;damask.solver.Marc(version=${MARC_VERSION}).submit_job('r-value','texture',True,'h')"
  script:
    - cd ${CI_PROJECT_DIR}/PRIVATE/testing
    - pytest -k 'not compile and Marc'

# Needs closer look
# Phenopowerlaw_singleSlip:
#   stage: core
#   script: Phenopowerlaw_singleSlip/test.py

grid_performance:
  stage: core
  extends: .petsc_oneapi_performance
  tags:
    - matesting
  before_script:
    - cmake -DDAMASK_SOLVER=grid -DOPTIMIZATION=AGGRESSIVE -B build/grid
    - cmake --build build/grid --parallel 4 --target install
    - source env/DAMASK.sh
  script:
    - git clone -q https://damask_user:${STATISTICS_TOKEN}@git.damask-multiphysics.org/damask/statistics.git
    - ./statistics/measure_performance.py --input_dir examples/grid --tag ${CI_COMMIT_SHA} --output_dir statistics
    - cp statistics/performance.txt .
  artifacts:
    paths: [performance.txt]


####################################################################################################
# Update Repositories
####################################################################################################

.update:
  stage: update_repositories
  image:
    name: alpine/git
    entrypoint: [""]
  before_script:
    - git config --global user.name "testbot"
    - git config --global user.email "testbot@damask-multiphysics.org"
  rules: [if: $CI_COMMIT_BRANCH == 'development']

update_statistics:
  extends: .update
  dependencies:
    - grid_performance
  script:
    - git clone -q https://damask_user:${STATISTICS_TOKEN}@git.damask-multiphysics.org/damask/statistics.git
    - cp performance.txt statistics/
    - cd statistics
    - git commit -m ${CI_PIPELINE_ID}_${CI_COMMIT_SHA} performance.txt
    - git push

update_revision:
  extends: .update
  script:
    - cd $(mktemp -d)
    - git clone -b development -q https://damask_user:${TOKEN}@git.damask-multiphysics.org/damask/DAMASK.git .
    - export VERSION=$(git describe ${CI_COMMIT_SHA})
    - echo ${VERSION:1} > VERSION
    - >
       git diff-index --quiet HEAD ||
       git commit VERSION -m "[skip ci] updated version information after successful test of $VERSION"
    - if [ ${CI_COMMIT_SHA} == $(git rev-parse HEAD^) ]; then git push --atomic --no-verify origin HEAD:development HEAD:master; fi


####################################################################################################
# Documentation
####################################################################################################

publish_website_master:
  stage: documentation
  trigger:
    project: damask/website
    branch: master
  rules: [if: $CI_COMMIT_BRANCH == 'development']

publish_website_3.0:
  stage: documentation
  trigger:
    project: damask/website
    branch: '3.0'
  rules: [if: $CI_COMMIT_BRANCH == '3.0']
