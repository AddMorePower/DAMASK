---
stages:
  - check_source
  - processing
  - core
  - update_repositories
  - documentation

####################################################################################################
variables:
  # GitLab Settings
  GIT_SUBMODULE_STRATEGY: normal
  # Shortcut names
  MARC_VERSION: '2024.1'
  PETSC_GCC_LATEST: '2025.05.27'
  PETSC_ONEAPI_LATEST: '2025.06.12'


####################################################################################################
# https://docs.gitlab.com/ci/yaml/workflow
workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_COMMIT_BRANCH
  auto_cancel:
    on_job_failure: all

.on_merge:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'

.on_merge_without_squash:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' && $CI_MERGE_REQUEST_SQUASH_ON_MERGE != 'true'


####################################################################################################
# Check Source
####################################################################################################

core_compile_all_commits:
  stage: check_source
  image: git.damask-multiphysics.org:5050/damask/damask/gcc_petsc-default:${PETSC_GCC_LATEST}
  tags:
    - docker_all
  variables:
    GIT_DEPTH: 0
  allow_failure: false
  extends:
    - .on_merge_without_squash
  script:
    - |
      for COMMIT in $(git log --reverse --format=format:%H origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME..$CI_COMMIT_SHA); do
        echo $COMMIT
      done


####################################################################################################
# Processing
####################################################################################################

.python_base:
  stage: processing
  image: git.damask-multiphysics.org:5050/damask/damask/python:$PYTHON_IMAGE
  tags:
    - docker_all
  before_script:
    - python --version
    - pip list

.python_default:
  extends: .python_base
  variables: {PYTHON_IMAGE: 2025.06.05}

.python_earliest:
  extends: .python_base
  variables: {PYTHON_IMAGE: '310_2412'}

mypy:
  extends: .python_default
  script:
    - cd python
    - mypy damask

.create_package:
  script:
    - sed -i 's/-[[:digit:]]*-.*//' VERSION
    - cd python
    - python3 -m build --wheel --no-isolation

create_package:
  extends:
    - .create_package
    - .python_default

create_package_earliest:
  extends:
    - .create_package
    - .python_earliest
    - .on_merge


.pytest:
  script:
    - export DAMASK_ROOT=$(pwd)
    - PYTHONPATH=${DAMASK_ROOT}/python:$PYTHONPATH
    - cd python
    - python3 -m pytest -v --cov=damask --cov-report=xml --damask-root=${DAMASK_ROOT}
    - coverage report --fail-under=90 --show-missing

pytest:
  extends:
    - .pytest
    - .python_default

pytest_earliest:
  extends:
    - .pytest
    - .python_earliest
    - .on_merge


doctest:
  extends: .python_default
  script:
    - export DAMASK_ROOT=$(pwd)
    - PYTHONPATH=${DAMASK_ROOT}/python:${PYTHONPATH}
    - cd python
    - cp tests/resources/doctest/* .
    # pretend neper to be present such that call to /bin/neper does not fail
    - echo '#!/usr/bin/env bash' > /bin/neper
    - chmod +x /bin/neper
    - python3 -m pytest -v --doctest-modules -k 'not result' damask


####################################################################################################
# Core
####################################################################################################

open-source:
  stage: core
  image: git.damask-multiphysics.org:5050/damask/damask/gcc_petsc-default:${PETSC_GCC_LATEST}
  tags:
    - docker_all
  needs: []
  before_script:
    - cmake -DDAMASK_SOLVER=grid -B build/grid && cmake --build build/grid --parallel 4 --target install
    - cmake -DDAMASK_SOLVER=mesh -B build/mesh && cmake --build build/mesh --parallel 4 --target install
    - source env/DAMASK.sh
  script:
    - cd PRIVATE/testing
    - export OMP_NUM_THREADS=2
    - pytest -v -x -n 3 --dist=loadscope --durations=20 -k 'not compile and not Marc'

.unittest:
  stage: core
  tags:
    - docker_all
  script:
    - source env/DAMASK.sh
    - ./bin/DAMASK_test
    - find . -name '*.gcda' -not -path "**/test/*" -exec gcov {} \;
  parallel:
    matrix:
      - BUILD_TYPE: [DEBUG, RELEASE, PERFORMANCE]

.unittest_GCC:
  extends: .unittest
  before_script:
    - cmake -B builddir -DDAMASK_SOLVER=test -DCMAKE_INSTALL_PREFIX=${PWD} -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DBUILDCMD_POST=-coverage
    - cmake --build builddir --target install

.unittest_oneAPI:
  extends: .unittest
  before_script:
    - cmake -B builddir -DDAMASK_SOLVER=test -DCMAKE_INSTALL_PREFIX=${PWD} -DCMAKE_BUILD_TYPE=${BUILD_TYPE}
    - cmake --build builddir --target install


unittest_GCC:
  extends: .unittest_GCC
  image: git.damask-multiphysics.org:5050/damask/damask/gcc_petsc-debug:${PETSC_GCC_LATEST}

unittest_oneAPI:
  extends: .unittest_oneAPI
  image: git.damask-multiphysics.org:5050/damask/damask/oneapi_petsc-debug:${PETSC_ONEAPI_LATEST}


unittest_GCC_earliest:
  extends:
    - .unittest_GCC
    - .on_merge
  image: git.damask-multiphysics.org:5050/damask/damask/gcc_petsc-debug:2025.03.10

unittest_oneAPI_earliest:
  extends:
    - .unittest_oneAPI
    - .on_merge
  image: git.damask-multiphysics.org:5050/damask/damask/oneapi_petsc-debug:2025.03.27


.compile:
  stage: core
  image: git.damask-multiphysics.org:5050/damask/damask/${PETSC_IMAGE}
  tags:
    - docker_all
  before_script:
    - tail +$(grep -n 'Configure Actions.*' /petsc/configure.log | cut -f 1 -d:) /petsc/configure.log
    - head -n 10 /petsc/include/petscversion.h | tail -n 6
    - source env/DAMASK.sh
    - cd PRIVATE/testing

.petsc_latest:
  parallel:
    matrix:
      - PETSC_IMAGE:
          - gcc_petsc-default:${PETSC_GCC_LATEST}
          - gcc_petsc-i64:${PETSC_GCC_LATEST}
          - oneapi_petsc-default:${PETSC_ONEAPI_LATEST}

.petsc_earliest:
  parallel:
    matrix:
      - PETSC_IMAGE:
          - gcc_petsc-default:2025.03.10
          - gcc_petsc-i64:2025.03.10
          - oneapi_petsc-default:2025.03.27

.compile_grid:
  extends: .compile
  script:
    - pytest -v -k 'compile and grid'

.compile_mesh:
  extends: .compile
  script:
    - pytest -v -k 'compile and mesh'

compile_grid:
  extends:
    - .compile_grid
    - .petsc_latest

compile_mesh:
  extends:
    - .compile_mesh
    - .petsc_latest

compile_grid_earliest:
  extends:
    - .compile_grid
    - .petsc_earliest
    - .on_merge

compile_mesh_earliest:
  extends:
    - .compile_mesh
    - .petsc_earliest
    - .on_merge

Marc_patch:
  stage: core
  image: git.damask-multiphysics.org:5050/damask/damask/marc_base:${MARC_VERSION}
  tags:
    - docker_all
  script:
    - source env/DAMASK.sh
    - export TMPDIR=/tmp
    - python3 install/MarcMentat/MSC_modifications.py --editor=gted --marc-version=${MARC_VERSION} --damask-root=${CI_PROJECT_DIR} --marc-root=/opt/msc
    - test -f /opt/msc/mentat${MARC_VERSION}/bin/kill6
    - cd examples/Marc && python3 -c "import damask;damask.solver.Marc(version=${MARC_VERSION}).submit_job('r-value','texture',True,'h')"
    - test -f ${CI_PROJECT_DIR}/src/Marc/DAMASK_Marc.marc || { echo 'Marc simulation failed, DAMASK_Marc.marc not generated'; exit 1; }

Marc_compile:
  stage: core
  image: git.damask-multiphysics.org:5050/damask/damask/marc_patched:${MARC_VERSION}
  tags:
    - docker_all
  script:
    - source env/DAMASK.sh
    - cd PRIVATE/testing
    - pytest -k 'compile and Marc'


.configexamples_debug:
  stage: core
  tags:
    - docker_all
  before_script:
    - tail +$(grep -n 'Configure Actions.*' /petsc/configure.log | cut -f 1 -d:) /petsc/configure.log
    - head -n 10 /petsc/include/petscversion.h | tail -n 6
    - source env/DAMASK.sh
    - cmake -B builddir -DDAMASK_SOLVER=grid -DCMAKE_BUILD_TYPE=DEBUG
    - cmake --build builddir --target install
    - cd PRIVATE/testing
  script:
    - pytest -v -k configexamples

configexamples_debug_GCC:
  extends: .configexamples_debug
  image: git.damask-multiphysics.org:5050/damask/damask/gcc_petsc-default:${PETSC_GCC_LATEST}

configexamples_debug_oneAPI:
  extends: .configexamples_debug
  image: git.damask-multiphysics.org:5050/damask/damask/oneapi_petsc-default:${PETSC_ONEAPI_LATEST}


Marc_run:
  stage: core
  image: git.damask-multiphysics.org:5050/damask/damask/marc_patched:${MARC_VERSION}
  tags:
    - docker_all
  before_script:
    - source env/DAMASK.sh
    - cd examples/Marc && python3 -c "import damask;damask.solver.Marc(version=${MARC_VERSION}).submit_job('r-value','texture',True,'h')"
  script:
    - cd ${CI_PROJECT_DIR}/PRIVATE/testing
    - pytest -k 'not compile and Marc'
  allow_failure: true

# Needs closer look
# Phenopowerlaw_singleSlip:
#   stage: core
#   script: Phenopowerlaw_singleSlip/test.py

grid_performance:
  stage: core
  image: git.damask-multiphysics.org:5050/damask/damask/oneapi_petsc-default:${PETSC_ONEAPI_LATEST}
  tags:
    - matesting
  before_script:
    - cmake -DDAMASK_SOLVER=grid -DOPTIMIZATION=AGGRESSIVE -B build/grid
    - cmake --build build/grid --parallel 4 --target install
    - source env/DAMASK.sh
  script:
    - git clone -q https://damask_user:${STATISTICS_TOKEN}@git.damask-multiphysics.org/damask/statistics.git
    - ./statistics/measure_performance.py --input_dir examples/grid --tag ${CI_COMMIT_SHA}
  artifacts:
    paths: [performance.txt]
    expire_in: 1 month


####################################################################################################
# Update Repositories
####################################################################################################

.update:
  stage: update_repositories
  image:
    name: alpine/git
    entrypoint: [""]
  tags:
    - docker_all
  before_script:
    - git config --global user.name "testbot"
    - git config --global user.email "testbot@damask-multiphysics.org"

update_statistics:
  extends: .update
  needs:
    - job: grid_performance
      artifacts: true
  script:
    - git clone -q https://damask_user:${STATISTICS_TOKEN}@git.damask-multiphysics.org/damask/statistics.git
    - cp performance.txt statistics/
    - cd statistics
    - git add performance.txt
    - git commit -m ${CI_PIPELINE_ID}_${CI_COMMIT_SHA}
    - git push
  rules: [if: $CI_COMMIT_BRANCH == 'development']

update_revision:
  extends: .update
  script:
    - cd $(mktemp -d)
    - git clone -b development -q https://damask_user:${TOKEN}@git.damask-multiphysics.org/damask/DAMASK.git .
    - export VERSION=$(git describe ${CI_COMMIT_SHA})
    - echo ${VERSION:1} > VERSION
    - >
       git diff-index --quiet HEAD ||
       git commit VERSION -m "[skip ci] updated version information after successful test of $VERSION"
    - if [ ${CI_COMMIT_SHA} == $(git rev-parse HEAD^) ]; then git push --atomic --no-verify origin HEAD:development HEAD:master; fi
  rules: [if: $CI_COMMIT_BRANCH == 'development']


####################################################################################################
# Documentation
####################################################################################################

publish_website_master:
  stage: documentation
  trigger:
    project: damask/website
    branch: master
  rules: [if: $CI_COMMIT_BRANCH == 'development']

publish_website_3.0:
  stage: documentation
  trigger:
    project: damask/website
    branch: '3.0'
  rules: [if: $CI_COMMIT_BRANCH == '3.0']
