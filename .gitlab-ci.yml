---
stages:
  - prepare
  - python
  - compile
  - fortran
  - statistics
  - finalize


###################################################################################################
default:
  before_script:
    - ${LOCAL_HOME}/bin/queue ${CI_JOB_ID} ${TOKEN}
    - source env/DAMASK.sh
    - export PATH=${TESTROOT}/bin:${PATH}
    - echo Job start:" $(date)"
  after_script:
    - echo Job end:" $(date)"


###################################################################################################
variables:
  # ===============================================================================================
  # GitLab Settings
  # ===============================================================================================
  GIT_SUBMODULE_STRATEGY: normal

  # ===============================================================================================
  # Shortcut names
  # ===============================================================================================
  TESTROOT:   "$LOCAL_HOME/GitLabCI_Pipeline_$CI_PIPELINE_ID"

  # ===============================================================================================
  # Names of module files to load
  # ===============================================================================================
  # ++++++++++++ Compiler/MPI/PETSc +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  COMPILER_INTEL: "Compiler/Intel/2022.0.1 Libraries/IMKL/2022.0.1"
  MPI_INTEL: "MPI/Intel/2022.0.1/IntelMPI/2021.5.0"
  PETSC_INTEL: "Libraries/PETSc/3.16.5/Intel-2022.0.1-IntelMPI-2021.5.0"
  # ++++++++++++ MSC Marc +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  MSC: "FEM/MSC/2024.1"
  IntelMarc: "Compiler/Intel/2022.0.1 Libraries/IMKL/2022.0.1"
  HDF5Marc: "HDF5/1.12.1/Intel-2022.0.1"


###################################################################################################
create_testroot:
  stage: prepare
  before_script:
    - ${LOCAL_HOME}/bin/queue ${CI_JOB_ID} ${TOKEN}
    - echo Job start:" $(date)"
  script:
    - mkdir -p ${TESTROOT}


###################################################################################################
setuptools:
  stage: python
  tags:
    - matesting2-container-runner
  image: git.damask-multiphysics.org:5050/damask/damask:python310_2407
  before_script: []
  script:
    - sed -i 's/-[[:digit:]]*-.*//' VERSION
    - cd python
    - python3 -m build --wheel --no-isolation

pytest:
  stage: python
  tags:
    - matesting2-container-runner
  image: git.damask-multiphysics.org:5050/damask/damask:python310_2407
  before_script: []
  script:
    - export DAMASK_ROOT=$(pwd)
    - PYTHONPATH=${DAMASK_ROOT}/python:$PYTHONPATH
    - cd python
    - python3 -m pytest -v --cov=damask --cov-report=xml --damaskroot=${DAMASK_ROOT}
    - coverage report --fail-under=90 --show-missing

mypy:
  stage: python
  tags:
    - matesting2-container-runner
  image: git.damask-multiphysics.org:5050/damask/damask:python310_2407
  before_script: []
  script:
    - cd python
    - mypy damask


###################################################################################################
unittest_GNU_DEBUG:
  stage: compile
  tags:
    - matesting2-container-runner
  image: git.damask-multiphysics.org:5050/damask/damask:ubuntu2404_gnu13_petsc2106
  before_script:
    - TEMPDIR=$(mktemp -d /tmp/tmp.XXXXXXXXXX)
    - cmake -B ${TEMPDIR} -DDAMASK_SOLVER=test -DCMAKE_INSTALL_PREFIX=${TEMPDIR} -DCMAKE_BUILD_TYPE=RELEASE -DBUILDCMD_POST=-coverage
    - cmake --build ${TEMPDIR} --target install
  script:
    - cd ${TEMPDIR}
    - ./bin/DAMASK_test
    - find . -name '*.gcda' -not -path "**/test/*" -exec gcov {} \;

unittest_GNU_RELEASE:
  stage: compile
  tags:
    - matesting2-container-runner
  image: git.damask-multiphysics.org:5050/damask/damask:ubuntu2404_gnu13_petsc2106
  before_script:
    - TEMPDIR=$(mktemp -d /tmp/tmp.XXXXXXXXXX)
    - cmake -B ${TEMPDIR} -DDAMASK_SOLVER=test -DCMAKE_INSTALL_PREFIX=${TEMPDIR} -DCMAKE_BUILD_TYPE=RELEASE -DBUILDCMD_POST=-coverage
    - cmake --build ${TEMPDIR} --target install
  script:
    - cd ${TEMPDIR}
    - ./bin/DAMASK_test
    - find . -name '*.gcda' -not -path "**/test/*" -exec gcov {} \;

unittest_GNU_PERFORMANCE:
  stage: compile
  tags:
    - matesting2-container-runner
  image: git.damask-multiphysics.org:5050/damask/damask:ubuntu2404_gnu13_petsc2106
  before_script:
    - TEMPDIR=$(mktemp -d /tmp/tmp.XXXXXXXXXX)
    - cmake -B ${TEMPDIR} -DDAMASK_SOLVER=test -DCMAKE_INSTALL_PREFIX=${TEMPDIR} -DCMAKE_BUILD_TYPE=PERFORMANCE -DBUILDCMD_POST=-coverage
    - cmake --build ${TEMPDIR} --target install
  script:
    - cd ${TEMPDIR}
    - ./bin/DAMASK_test
    - find . -name '*.gcda' -not -path "**/test/*" -exec gcov {} \;

grid_GNU:
  stage: compile
  tags:
    - matesting2-container-runner
  image: git.damask-multiphysics.org:5050/damask/damask:ubuntu2404_gnu13_petsc2106
  before_script:
    - source env/DAMASK.sh
  script:
    - cd PRIVATE/testing
    - pytest -k 'compile and grid'

mesh_GNU:
  stage: compile
  tags:
    - matesting2-container-runner
  image: git.damask-multiphysics.org:5050/damask/damask:ubuntu2404_gnu13_petsc2106
  before_script:
    - source env/DAMASK.sh
  script:
    - cd PRIVATE/testing
    - pytest -k 'compile and mesh'

grid_GNU-64bit:
  stage: compile
  tags:
    - matesting2-container-runner
  image: git.damask-multiphysics.org:5050/damask/damask:ubuntu2404_gnu13_petsc2106_64bit
  before_script:
    - source env/DAMASK.sh
  script:
    - cd PRIVATE/testing
    - pytest -k 'compile and grid'

mesh_GNU-64bit:
  stage: compile
  tags:
    - matesting2-container-runner
  image: git.damask-multiphysics.org:5050/damask/damask:ubuntu2404_gnu13_petsc2106_64bit
  before_script:
    - source env/DAMASK.sh
  script:
    - cd PRIVATE/testing
    - pytest -k 'compile and mesh'

grid_intel:
  stage: compile
  tags:
    - matesting2-container-runner
  image: git.damask-multiphysics.org:5050/damask/damask:ubuntu2404_intel20232_petsc2106
  before_script:
    - source /opt/intel/oneapi/setvars.sh
    - source env/DAMASK.sh
  script:
    - cd PRIVATE/testing
    - pytest -k 'compile and grid'

mesh_intel:
  stage: compile
  tags:
    - matesting2-container-runner
  image: git.damask-multiphysics.org:5050/damask/damask:ubuntu2404_intel20232_petsc2106
  before_script:
    - source /opt/intel/oneapi/setvars.sh
    - source env/DAMASK.sh
  script:
    - cd PRIVATE/testing
    - pytest -k 'compile and mesh'

grid_IntelLLVM:
  stage: compile
  tags:
    - matesting2-container-runner
  image: git.damask-multiphysics.org:5050/damask/damask:ubuntu2404_intel_llvm20242_petsc2106
  before_script:
    - source /opt/intel/oneapi/setvars.sh
    - source env/DAMASK.sh
  script:
    - cd PRIVATE/testing
    - pytest -k 'compile and grid'

mesh_IntelLLVM:
  stage: compile
  tags:
    - matesting2-container-runner
  image: git.damask-multiphysics.org:5050/damask/damask:ubuntu2404_intel_llvm20242_petsc2106
  before_script:
    - source /opt/intel/oneapi/setvars.sh
    - source env/DAMASK.sh
  script:
    - cd PRIVATE/testing
    - pytest -k 'compile and mesh'

Marc_Intel:
  stage: compile
  script:
    - module load $IntelMarc $HDF5Marc $MSC
    - cd PRIVATE/testing
    - pytest -k 'compile and Marc' --basetemp ${TESTROOT}/compile_Marc

setup_Marc:
  stage: compile
  script:
    - module load $IntelMarc $HDF5Marc $MSC
    - cd $(mktemp -d)
    - cp ${CI_PROJECT_DIR}/examples/Marc/* .
    - python3 -c "import damask;damask.solver.Marc().submit_job('r-value','texture',True,'h')"
    - mkdir -p ${TESTROOT}/src/Marc
    - mv ${CI_PROJECT_DIR}/src/Marc/DAMASK_Marc.marc ${TESTROOT}/src/Marc


###################################################################################################
open-source_grid_GNU:
  stage: fortran
  tags:
    - matesting2-container-runner
  image: git.damask-multiphysics.org:5050/damask/damask:ubuntu2204_gnu11_petsc2106_ml
  before_script:
    - cmake -DDAMASK_SOLVER=GRID && make -j2 all install
    - source env/DAMASK.sh
  script:
    - cd PRIVATE/testing
    - pytest -k 'not compile and grid and not signal and not restart'

open-source_grid_GNU_signal_restart:
  stage: fortran
  before_script:
    - module load ${COMPILER_INTEL} ${MPI_INTEL} ${PETSC_INTEL}
    - cd $(mktemp -d)
    - cmake -DDAMASK_SOLVER=GRID -DCMAKE_INSTALL_PREFIX=${TESTROOT} ${CI_PROJECT_DIR}
    - make -j2 all install
    - export PATH=${TESTROOT}/bin:${PATH}
    - cd ${CI_PROJECT_DIR}
    - source env/DAMASK.sh
    - echo Job start:" $(date)"
  script:
    - cd PRIVATE/testing
    - pytest -k 'not compile and grid and (signal or restart)' -m 'not cifail' --basetemp ${TESTROOT}/open-source -v
  after_script:
    - echo Job end:" $(date)"

open-source_mesh_GNU:
  tags:
    - matesting2-container-runner
  image: git.damask-multiphysics.org:5050/damask/damask:ubuntu2204_gnu13_petsc2106_ml
  stage: fortran
  before_script:
    - make mesh
    - source env/DAMASK.sh
  script:
    - cd PRIVATE/testing
    - pytest -k 'not compile and mesh'

Marc:
  stage: fortran
  script:
    - cd PRIVATE/testing
    - pytest -k 'not compile and Marc' -m 'not cifail' --damask-root=${TESTROOT} --basetemp ${TESTROOT}/Marc -v

# Needs closer look
# Phenopowerlaw_singleSlip:
#   stage: fortran
#   script: Phenopowerlaw_singleSlip/test.py


###################################################################################################
grid_performance:
  stage: statistics
  before_script:
    - ${LOCAL_HOME}/bin/queue2 ${CI_JOB_ID} ${TOKEN} --blocking
    - source env/DAMASK.sh
    - echo Job start:" $(date)"
  script:
    - module load ${COMPILER_INTEL} ${MPI_INTEL} ${PETSC_INTEL}
    - cd $(mktemp -d)
    - cmake -DOPTIMIZATION=AGGRESSIVE -DDAMASK_SOLVER=GRID -DCMAKE_INSTALL_PREFIX=./ ${CI_PROJECT_DIR}
    - make -j2 all install
    - export PATH=${PWD}/bin:${PATH}
    - cd $(mktemp -d)
    - git clone -q git@git.damask-multiphysics.org:damask/statistics.git .
    - ./measure_performance.py --input_dir ${CI_PROJECT_DIR}/examples/grid --tag ${CI_COMMIT_SHA}
    - >
        if [ ${CI_COMMIT_BRANCH} == development ]; then
          git add performance.txt
          git commit -m ${CI_PIPELINE_ID}_${CI_COMMIT_SHA}
          git push
        fi


###################################################################################################
update_website_master:
  stage: finalize
  trigger:
    project: damask/website
    branch: master
  only:
    - development

update_website_3.0:
  stage: finalize
  trigger:
    project: damask/website
    branch: "3.0"
  only:
    - "3.0"

update_revision:
  stage: finalize
  before_script:
    - ${LOCAL_HOME}/bin/queue2 ${CI_JOB_ID} ${TOKEN}
    - echo Job start:" $(date)"
  script:
    - cd $(mktemp -d)
    - git clone -q git@git.damask-multiphysics.org:damask/DAMASK.git .
    - git pull
    - export VERSION=$(git describe ${CI_COMMIT_SHA})
    - echo ${VERSION:1} > VERSION
    - >
       git diff-index --quiet HEAD ||
       git commit VERSION -m "[skip ci] updated version information after successful test of $VERSION"
    - if [ ${CI_COMMIT_SHA} == $(git rev-parse HEAD^) ]; then git push --atomic --no-verify origin HEAD:development HEAD:master; fi
  only:
    - development
